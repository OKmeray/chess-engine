## Build stage
#FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build
#WORKDIR /src
#COPY . .
#RUN dotnet restore "ChessEngine.API/ChessEngine.API.csproj"
#RUN dotnet build "ChessEngine.API/ChessEngine.API.csproj" -c Release -o /app/build
#
## Publish stage
#FROM build AS publish
#RUN dotnet publish "ChessEngine.API/ChessEngine.API.csproj" -c Release -o /app/publish
#
## Runtime stage
#FROM mcr.microsoft.com/dotnet/aspnet:8.0 AS final
#WORKDIR /app
#COPY --from=publish /app/publish .
#
## Install dependencies for ONNX Runtime
#RUN apt-get update && \
    #apt-get install -y --no-install-recommends libgomp1 && \
    #rm -rf /var/lib/apt/lists/*
#
#ENTRYPOINT ["dotnet", "ChessEngine.API.dll"]

# backend/Dockerfile
FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build
WORKDIR /src
COPY . .  
RUN dotnet restore "ChessEngine.API/ChessEngine.API.csproj"
RUN dotnet build "ChessEngine.API/ChessEngine.API.csproj" -c Release -o /app/build

FROM build AS publish
RUN dotnet publish "ChessEngine.API/ChessEngine.API.csproj" -c Release -o /app/publish

FROM mcr.microsoft.com/dotnet/aspnet:8.0 AS final
WORKDIR /app
COPY --from=publish /app/publish .

COPY ChessEngine.Application/MCTS/AIModels /app/AIModels

# install your ONNX deps
RUN apt-get update \
 && apt-get install -y --no-install-recommends libgomp1 \
 && rm -rf /var/lib/apt/lists/*

# tell Kestrel to listen on 0.0.0.0:80
ENV ASPNETCORE_URLS=http://+:80  
ENV ASPNETCORE_ENVIRONMENT=Production

ENTRYPOINT ["dotnet", "ChessEngine.API.dll"]